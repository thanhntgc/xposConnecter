<?php

class SM_XRetail_Contract_ApiAbstract extends Mage_Core_Controller_Front_Action
{
    /**
     * @var string
     */
    protected $_service;
    protected $_function;

    /**
     * @var SM_XRetail_Model_Api_Configuration
     */
    protected $_apiConfig;

    /**
     * @var array Data current Router in config
     */
    protected $_dataRouter;

    /**
     * @var Mage_Core_Model_Config
     */
    protected $scopeConfig;
    protected $_output;

    /**
     * @var integer
     */
    private $_statusCode;

    /**
     * SM_XRetail_Contract_ApiAbstract constructor.
     *
     * @param Zend_Controller_Request_Abstract $request
     * @param Zend_Controller_Response_Abstract $response
     * @param array $invokeArgs
     */
    public function __construct(
        Zend_Controller_Request_Abstract $request,
        Zend_Controller_Response_Abstract $response,
        array $invokeArgs
    ) {
        $this->_apiConfig = Mage::getModel('xretail/api_configuration');
        parent::__construct($request, $response, $invokeArgs);
    }

    /**
     * @return bool
     */
    public function _validateFormKey()
    {
        return true;
//        return parent::_validateFormKey(); // TODO: Change the autogenerated stub
    }

    /**
     * @return Zend_Controller_Response_Abstract
     */
    protected function jsonOutput()
    {
        $response = $this->getResponse();
        $response->clearHeaders()
            ->setHeader('Content-Type', 'application/json')
            ->setHeader('Access-Control-Allow-Headers', 'Content-Type')
            ->setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
            ->setHeader("Access-Control-Allow-Origin", "*");

        return $this->getResponse()->setBody(json_encode($this->_output));
    }

    /**
     * @throws Exception
     */
    public function checkPath()
    {
        $request = $this->getRequest();

        $path = explode('/', $request->getPathInfo());
        if (!isset($path[4])) {
            throw new Exception('router not found');
        }
        $this->validateRouter($path[4]);
    }

    /**
     * @param $router
     *
     * @return mixed
     * @throws Exception
     * @throws Zend_Controller_Response_Exception
     */
    private function validateRouter($router)
    {
        /** @var Mage_Core_Controller_Response_Http */
        $response = $this->getResponse();

        /** @var Mage_Core_Controller_Request_Http */
        $request = $this->getRequest();

        $allXRetailApiRouter = $this->_apiConfig->getApiRouters();
        foreach ($allXRetailApiRouter as $key => $r) {
            foreach ($r as $routerName => $routerData) {
                if ($router == $routerName) {
                    $routerData = $routerData->asArray();
                    //check method
                    if (!isset($routerData['method'])) {
                        continue;
                    }

                    //check type Method
                    if (!call_user_func([$request, 'is' . $routerData['method']])) {
                        continue;
                    }
                    //check function function
                    $modelName = $routerData['service'];
//                    var_dump(Mage::getModel($modelName)->getData());die;
                    $this->setService(Mage::getModel($modelName));
                    $this->setFunction($routerData['function']);
                    if (!method_exists($this->getService(), $this->getFunction())) {
                        continue;
                    }
                    return $this->_dataRouter = $routerData;
                }
            }
        }
        $response->setHttpResponseCode(404);
        throw new Exception('Router not found');
    }

    /**
     * @return mixed
     */
    public function getService()
    {
        return $this->_service;
    }

    /**
     * @param mixed $service
     */
    public function setService($service)
    {
        $this->_service = $service;
    }

    /**
     * @return mixed
     */
    public function getFunction()
    {
        return $this->_function;
    }

    /**
     * @param mixed $function
     */
    public function setFunction($function)
    {
        $this->_function = $function;
    }

    /**
     * @param $output
     */
    public function setOutput($output)
    {
        $this->_output = $output;
    }
    public function getOutput(){
        return $this->_output;
    }

    public function outputError($error, $code = 400)
    {
        /** @var Mage_Core_Controller_Response_Http */
        $response = $this->getResponse();

        /** @var Mage_Core_Controller_Request_Http */
        $request = $this->getRequest();

        if ($request->isOptions()) {
            $response->clearHeaders()
                ->setHeader('Content-Type', 'application/json')
                ->setHeader("Access-Control-Allow-Origin", "*")
                ->setHeader("Access-Control-Allow-Methods", "*")
                ->setHeader("Access-Control-Allow-Headers",
                    "Content-Type, Access-Control-Allow-Headers, Authorization, X-Requested-With,Black-Hole,Authorization-Code")
                ->setHttpResponseCode(200);
        } else {
            $response->clearHeaders()
                ->setHeader('Content-Type', 'application/json')
                ->setHeader("Access-Control-Allow-Origin", "*")
                ->setHttpResponseCode($code | 400)
                ->setBody(
                    json_encode(
                        [
                            'error' => true,
                            'message' => $error
                        ]));
        }
//        if ($this->config->isEnabled()) {
//            $response->setPublicHeaders($this->config->getTtl());
//        }

        return $response;
    }

    /**
     * @param       $name
     * @param array $data
     *
     * @return Mage_Core_Model_App
     */
    public function dispatchEvent($name, array $data = [])
    {
        return Mage::dispatchEvent($name, $data);
    }

    /**
     * @return mixed
     */
    public function getStatusCode()
    {
        return $this->_statusCode;
    }

    /**
     * @param mixed $statusCode
     *
     * @return $this
     */
    public function setStatusCode($statusCode)
    {
        $this->_statusCode = $statusCode;

        return $this;
    }
}
